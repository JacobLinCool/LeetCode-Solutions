import{_ as n,e as s}from"./app.319ca52c.js";const a={},e=s(`<h1 id="_105-construct-binary-tree-from-preorder-and-inorder-traversal" tabindex="-1"><a class="header-anchor" href="#_105-construct-binary-tree-from-preorder-and-inorder-traversal" aria-hidden="true">#</a> 105. Construct Binary Tree from Preorder and Inorder Traversal</h1><h2 id="problem" tabindex="-1"><a class="header-anchor" href="#problem" aria-hidden="true">#</a> Problem</h2><br><p>Tags: <code>Array</code>, <code>Hash Table</code>, <code>Divide and Conquer</code>, <code>Tree</code>, <code>Binary Tree</code></p><p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Example 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: preorder = [-1], inorder = [-1]
Output: [-1]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= preorder.length &lt;= 3000</code></li><li><code>inorder.length == preorder.length</code></li><li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li><li><code>preorder</code> and <code>inorder</code> consist of <strong>unique</strong> values.</li><li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li><li><code>preorder</code> is <strong>guaranteed</strong> to be the preorder traversal of the tree.</li><li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li></ul><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="js" tabindex="-1"><a class="header-anchor" href="#js" aria-hidden="true">#</a> JS</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 105. Construct Binary Tree from Preorder and Inorder Traversal (6/15/53405)</span>
<span class="token comment">// Runtime: 100 ms (72.57%) Memory: 41.86 MB (94.44%) </span>

<span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">preorder</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">inorder</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4EE5\u4FBF\u5F9E\u7BC0\u9EDE value \u4F86\u53CD\u67E5\u5728 inorder \u4E2D\u7684\u4F4D\u7F6E</span>
    <span class="token keyword">let</span> inorder_location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> inorder_location<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">function</span> <span class="token function">tree_build</span><span class="token punctuation">(</span><span class="token parameter">preorder_root_location<span class="token punctuation">,</span> inorder_left_bound<span class="token punctuation">,</span> inorder_right_bound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5EFA\u69CB root \u7BC0\u9EDE\uFF0C\u7372\u53D6 root \u5728 inorder \u7684\u4F4D\u7F6E</span>
        <span class="token keyword">let</span> root_value <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preorder_root_location<span class="token punctuation">]</span><span class="token punctuation">,</span>
            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>root_value<span class="token punctuation">)</span><span class="token punctuation">,</span>
            inorder_root_location <span class="token operator">=</span> inorder_location<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// \u4EE5\u5DE6\u5B50\u7BC0\u9EDE\u70BA root \u5EFA\u69CB\u5B50\u6A39</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>inorder_root_location <span class="token operator">&gt;</span> inorder_left_bound<span class="token punctuation">)</span> 
            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">tree_build</span><span class="token punctuation">(</span>preorder_root_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder_left_bound<span class="token punctuation">,</span> inorder_root_location <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment">// \u4EE5\u53F3\u5B50\u7BC0\u9EDE\u70BA root \u5EFA\u69CB\u5B50\u6A39</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>inorder_root_location <span class="token operator">&lt;</span> inorder_right_bound<span class="token punctuation">)</span> 
            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">tree_build</span><span class="token punctuation">(</span>preorder_root_location <span class="token operator">+</span> inorder_root_location <span class="token operator">-</span> inorder_left_bound <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder_root_location <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder_right_bound<span class="token punctuation">)</span>
        
        <span class="token comment">// \u56DE\u50B3 root\uFF0C\u5305\u542B\u5176\u5B50\u6A39</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u958B\u59CB\u5EFA\u69CB\u9019\u68F5\u6A39\uFF0C\u5F9E root (preorder[0]) \u958B\u59CB\u505A\uFF0Cinorder \u7684\u7BC4\u570D\u70BA\u6574\u500B\u7684 inorder</span>
    <span class="token keyword">return</span> <span class="token function">tree_build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>`,15);function o(p,t){return e}var c=n(a,[["render",o],["__file","index.html.vue"]]);export{c as default};
