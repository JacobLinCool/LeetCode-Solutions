import{e as n}from"./app.ce8339a2.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},t=n(`<h1 id="_1465-maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts" tabindex="-1"><a class="header-anchor" href="#_1465-maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts" aria-hidden="true">#</a> 1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts</h1><br><p>Tags: <code>Array</code>, <code>Greedy</code>, <code>Sorting</code></p><p>You are given a rectangular cake of size <code>h x w</code> and two arrays of integers <code>horizontalCuts</code> and <code>verticalCuts</code> where:</p><ul><li><code>horizontalCuts[i]</code> is the distance from the top of the rectangular cake to the <code>i^th</code> horizontal cut and similarly, and</li><li><code>verticalCuts[j]</code> is the distance from the left of the rectangular cake to the <code>j^th</code> vertical cut.</li></ul><p>Return <em>the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays</em> <code>horizontalCuts</code> <em>and</em> <code>verticalCuts</code>. Since the answer can be a large number, return this <strong>modulo</strong> <code>10^9 + 7</code>.</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/05/14/leetcode_max_area_2.png" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
Output: 4 
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Example 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/05/14/leetcode_max_area_3.png" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
Output: 6
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Example 3:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
Output: 9
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= h, w &lt;= 10^9</code></li><li><code>1 &lt;= horizontalCuts.length &lt;= min(h - 1, 10^5)</code></li><li><code>1 &lt;= verticalCuts.length &lt;= min(w - 1, 10^5)</code></li><li><code>1 &lt;= horizontalCuts[i] &lt; h</code></li><li><code>1 &lt;= verticalCuts[i] &lt; w</code></li><li>All the elements in <code>horizontalCuts</code> are distinct.</li><li>All the elements in <code>verticalCuts</code> are distinct.</li></ul><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts (12/26/2021)</span>
<span class="token comment">// Runtime: 56 ms (70.00%) Memory: 12.24 MB (0.00%) </span>

<span class="token keyword">int</span> <span class="token function">compare</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>a <span class="token operator">-</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> horizontalCuts<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> horizontalCutsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> verticalCuts<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> verticalCutsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// \u5148\u628A\u5207\u5272\u7DDA\u90FD\u505A\u905E\u589E\u6392\u5E8F</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>horizontalCuts<span class="token punctuation">,</span> horizontalCutsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>verticalCuts<span class="token punctuation">,</span> verticalCutsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u7D00\u9304\u6700\u5927\u9AD8\u5EA6\u4EE5\u53CA\u6700\u5927\u5BEC\u5EA6\uFF0C\u521D\u59CB\u503C\u8A2D\u70BA\u7B2C\u4E00\u689D\u5207\u5272\u7DDA\u5230\u76F8\u9130\u908A\u754C\u7684\u8DDD\u96E2</span>
    <span class="token class-name">int64_t</span> max_height <span class="token operator">=</span> horizontalCuts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max_width <span class="token operator">=</span> verticalCuts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// \u9010\u6B65\u770B\u5169\u76F8\u9130\u5207\u5272\u7DDA\u8DDD\u96E2\uFF0C\u627E\u6700\u5927\u9AD8\u5EA6</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> horizontalCutsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">int64_t</span> height <span class="token operator">=</span> horizontalCuts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> horizontalCuts<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        max_height <span class="token operator">=</span> height <span class="token operator">&gt;</span> max_height <span class="token operator">?</span> height <span class="token operator">:</span> max_height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u4E5F\u8981\u770B\u770B\u6700\u5F8C\u4E00\u689D\u5207\u5272\u7DDA\u5230\u76F8\u9130\u908A\u754C\u7684\u8DDD\u96E2</span>
    <span class="token class-name">int64_t</span> height <span class="token operator">=</span> h <span class="token operator">-</span> horizontalCuts<span class="token punctuation">[</span>horizontalCutsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    max_height <span class="token operator">=</span> height <span class="token operator">&gt;</span> max_height <span class="token operator">?</span> height <span class="token operator">:</span> max_height<span class="token punctuation">;</span>
    
    <span class="token comment">// \u9010\u6B65\u770B\u5169\u76F8\u9130\u5207\u5272\u7DDA\u8DDD\u96E2\uFF0C\u627E\u6700\u5927\u5BEC\u5EA6</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> verticalCutsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">int64_t</span> width <span class="token operator">=</span> verticalCuts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> verticalCuts<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        max_width <span class="token operator">=</span> width <span class="token operator">&gt;</span> max_width <span class="token operator">?</span> width <span class="token operator">:</span> max_width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u770B\u770B\u6700\u5F8C\u4E00\u689D\u5207\u5272\u7DDA\u5230\u76F8\u9130\u908A\u754C\u7684\u8DDD\u96E2</span>
    <span class="token class-name">int64_t</span> width <span class="token operator">=</span> w <span class="token operator">-</span> verticalCuts<span class="token punctuation">[</span>verticalCutsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    max_width <span class="token operator">=</span> width <span class="token operator">&gt;</span> max_width <span class="token operator">?</span> width <span class="token operator">:</span> max_width<span class="token punctuation">;</span>
    
    <span class="token comment">// \u8F38\u51FA\u6700\u5927\u584A\u9762\u7A4D</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max_height <span class="token operator">*</span> max_width<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token class-name">int64_t</span><span class="token punctuation">)</span><span class="token number">1000000007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="js" tabindex="-1"><a class="header-anchor" href="#js" aria-hidden="true">#</a> JS</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts (6/4/2021)</span>
<span class="token comment">// Runtime: 140 ms (80.52%) Memory: 48.12 MB (90.91%) </span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">h</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">w</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">horizontalCuts</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">verticalCuts</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">maxArea</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> horizontalCuts<span class="token punctuation">,</span> verticalCuts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    verticalCuts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    horizontalCuts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>verticalCuts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> verticalCuts<span class="token punctuation">[</span>verticalCuts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>horizontalCuts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> horizontalCuts<span class="token punctuation">[</span>horizontalCuts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> max_height <span class="token operator">=</span> horizontalCuts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max_width <span class="token operator">=</span> verticalCuts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> horizontalCuts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> height <span class="token operator">=</span> horizontalCuts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> horizontalCuts<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        max_height <span class="token operator">=</span> height <span class="token operator">&gt;</span> max_height <span class="token operator">?</span> height <span class="token operator">:</span> max_height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> height <span class="token operator">=</span> h <span class="token operator">-</span> horizontalCuts<span class="token punctuation">[</span>horizontalCuts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    max_height <span class="token operator">=</span> height <span class="token operator">&gt;</span> max_height <span class="token operator">?</span> height <span class="token operator">:</span> max_height<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> verticalCuts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> width <span class="token operator">=</span> verticalCuts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> verticalCuts<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        max_width <span class="token operator">=</span> width <span class="token operator">&gt;</span> max_width <span class="token operator">?</span> width <span class="token operator">:</span> max_width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> width <span class="token operator">=</span> w <span class="token operator">-</span> verticalCuts<span class="token punctuation">[</span>verticalCuts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    max_width <span class="token operator">=</span> width <span class="token operator">&gt;</span> max_width <span class="token operator">?</span> width <span class="token operator">:</span> max_width<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span>max_height <span class="token operator">*</span> max_width<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>`,21);function p(e,o){return t}var r=s(a,[["render",p]]);export{r as default};
