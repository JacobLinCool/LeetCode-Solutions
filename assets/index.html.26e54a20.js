import{_ as o,r as c,o as p,c as l,a as n,b as a,F as i,d as s,e as t}from"./app.54b71ebc.js";const r={},d=n("h1",{id:"_28-implement-strstr",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_28-implement-strstr","aria-hidden":"true"},"#"),s(" 28. Implement strStr()")],-1),u=n("br",null,null,-1),k=n("p",null,[s("Tags: "),n("code",null,"Two Pointers"),s(", "),n("code",null,"String"),s(", "),n("code",null,"String Matching")],-1),m=s("Implement "),h={href:"http://www.cplusplus.com/reference/cstring/strstr/",target:"_blank",rel:"noopener noreferrer"},v=s("strStr()"),_=s("."),b=t("<p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p><p><strong>Clarification:</strong></p><p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p>",3),g=s("For the purpose of this problem, we will return 0 when "),f=n("code",null,"needle",-1),y=s(" is an empty string. This is consistent to C's "),w={href:"http://www.cplusplus.com/reference/cstring/strstr/",target:"_blank",rel:"noopener noreferrer"},x=s("strstr()"),q=s(" and Java's "),S={href:"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)",target:"_blank",rel:"noopener noreferrer"},I=s("indexOf()"),C=s("."),E=t(`<p><strong>Example 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: haystack = &quot;hello&quot;, needle = &quot;ll&quot;
Output: 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;
Output: -1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= haystack.length, needle.length &lt;= 10^4</code></li><li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li></ul><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 28. Implement strStr() (12/27/2021)</span>
<span class="token comment">// Runtime: 12 ms (18.10%) Memory: 6.04 MB (14.70%) </span>

<span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token keyword">char</span> haystack<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> needle<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C needle \u70BA\u7A7A\u5B57\u4E32\uFF0C\u76F4\u63A5\u56DE\u50B3 0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// \u8A08\u7B97\u5169\u5B57\u4E32\u9577\u5EA6</span>
    <span class="token keyword">int</span> haystack_length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> needle_length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// haystack \u5F9E\u982D\u958B\u59CB\u6BD4\u5C0D</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> haystack_length <span class="token operator">-</span> needle_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u7528 memcmp \u6BD4\u8F03</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>haystack <span class="token operator">+</span> i<span class="token punctuation">,</span> needle<span class="token punctuation">,</span> needle_length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function T(B,N){const e=c("ExternalLinkIcon");return p(),l(i,null,[d,u,k,n("p",null,[m,n("a",h,[v,a(e)]),_]),b,n("p",null,[g,f,y,n("a",w,[x,a(e)]),q,n("a",S,[I,a(e)]),C]),E],64)}var V=o(r,[["render",T],["__file","index.html.vue"]]);export{V as default};
