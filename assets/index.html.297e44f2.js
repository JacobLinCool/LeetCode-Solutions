import{e as n}from"./app.a7b63ab0.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="_20-valid-parentheses" tabindex="-1"><a class="header-anchor" href="#_20-valid-parentheses" aria-hidden="true">#</a> 20. Valid Parentheses</h1><br><p>Tags: <code>String</code>, <code>Stack</code></p><p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p><strong>Example 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;()&quot;
Output: true
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Example 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;()[]{}&quot;
Output: true
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Example 3:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;(]&quot;
Output: false
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li></ul><h2 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution</h2><p>It is a classic problem about stack.</p><p>We iterate over the whole string, when we meet the left parenthesis (<code>(</code>, <code>[</code>, or <code>{</code>), push them into the stack.</p><p>Then, when we meet the right parenthesis (<code>)</code>, <code>]</code>, or <code>}</code>), check if the stack top is the paired one of it.</p><p>At the end, if all the items in the stack are removed (popped), then we know the all the parentheses are paired.</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 20. Valid Parentheses (3/13/2022)</span>
<span class="token comment">// Runtime: 0 ms (93.07%) Memory: 6.82 MB (0.00%) </span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">StructStack</span><span class="token expression"><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> _type<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_name</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">_type<span class="token operator">*</span> data<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token class-name">uint64_t</span> size<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token class-name">uint64_t</span> max<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>push<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">,</span> _type<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>pop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>top<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token class-name">uint8_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>empty<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>clear<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> _name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> push_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">,</span> _type val<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> stack<span class="token operator">-&gt;</span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token keyword">return</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression">_type pop_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">--</span>stack<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression">_type top_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token class-name">uint8_t</span> empty_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> clear_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> free_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression">_name<span class="token operator">*</span> create_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> max_size<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">_name<span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>max_size<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>max <span class="token operator">=</span> max_size<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>push <span class="token operator">=</span> <span class="token operator">&amp;</span>push_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>pop <span class="token operator">=</span> <span class="token operator">&amp;</span>pop_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">&amp;</span>top_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>empty <span class="token operator">=</span> <span class="token operator">&amp;</span>empty_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>clear <span class="token operator">=</span> <span class="token operator">&amp;</span>clear_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>free <span class="token operator">=</span> <span class="token operator">&amp;</span>free_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> stack<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span></span></span>

<span class="token function">StructStack</span><span class="token punctuation">(</span>Stack<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bool <span class="token function">isValid</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Stack<span class="token operator">*</span> parentheses <span class="token operator">=</span> <span class="token function">create_Stack</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strchr</span><span class="token punctuation">(</span><span class="token string">&quot;([{&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            parentheses<span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span>parentheses<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strchr</span><span class="token punctuation">(</span><span class="token string">&quot;)]}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> top <span class="token operator">=</span> parentheses<span class="token operator">-&gt;</span><span class="token function">top</span><span class="token punctuation">(</span>parentheses<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;)&#39;</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">!=</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;]&#39;</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">!=</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;}&#39;</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">!=</span> <span class="token char">&#39;{&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            parentheses<span class="token operator">-&gt;</span><span class="token function">pop</span><span class="token punctuation">(</span>parentheses<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> parentheses<span class="token operator">-&gt;</span><span class="token function">empty</span><span class="token punctuation">(</span>parentheses<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br></div></div><h3 id="js" tabindex="-1"><a class="header-anchor" href="#js" aria-hidden="true">#</a> JS</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 20. Valid Parentheses (10/6/2021)</span>
<span class="token comment">// Runtime: 104 ms (27.17%) Memory: 38.37 MB (93.22%) </span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> stk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>stk<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> last <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&quot;)&quot;</span> <span class="token operator">&amp;&amp;</span> last <span class="token operator">!==</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&quot;]&quot;</span> <span class="token operator">&amp;&amp;</span> last <span class="token operator">!==</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&quot;}&quot;</span> <span class="token operator">&amp;&amp;</span> last <span class="token operator">!==</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stk<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,24);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
