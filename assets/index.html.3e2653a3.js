import{e as n}from"./app.a7b63ab0.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="_71-simplify-path" tabindex="-1"><a class="header-anchor" href="#_71-simplify-path" aria-hidden="true">#</a> 71. Simplify Path</h1><br><p>Tags: <code>String</code>, <code>Stack</code></p><p>Given a string <code>path</code>, which is an <strong>absolute path</strong> (starting with a slash <code>&#39;/&#39;</code>) to a file or directory in a Unix-style file system, convert it to the simplified <strong>canonical path</strong>.</p><p>In a Unix-style file system, a period <code>&#39;.&#39;</code> refers to the current directory, a double period <code>&#39;..&#39;</code> refers to the directory up a level, and any multiple consecutive slashes (i.e. <code>&#39;//&#39;</code>) are treated as a single slash <code>&#39;/&#39;</code>. For this problem, any other format of periods such as <code>&#39;...&#39;</code> are treated as file/directory names.</p><p>The <strong>canonical path</strong> should have the following format:</p><ul><li>The path starts with a single slash <code>&#39;/&#39;</code>.</li><li>Any two directories are separated by a single slash <code>&#39;/&#39;</code>.</li><li>The path does not end with a trailing <code>&#39;/&#39;</code>.</li><li>The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period <code>&#39;.&#39;</code> or double period <code>&#39;..&#39;</code>)</li></ul><p>Return <em>the simplified <strong>canonical path</strong></em>.</p><p><strong>Example 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: path = &quot;/home/&quot;
Output: &quot;/home&quot;
Explanation: Note that there is no trailing slash after the last directory name.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Example 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: path = &quot;/../&quot;
Output: &quot;/&quot;
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Example 3:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: path = &quot;/home//foo/&quot;
Output: &quot;/home/foo&quot;
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= path.length &lt;= 3000</code></li><li><code>path</code> consists of English letters, digits, period <code>&#39;.&#39;</code>, slash <code>&#39;/&#39;</code> or <code>&#39;_&#39;</code>.</li><li><code>path</code> is a valid absolute Unix path.</li></ul><h2 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution</h2><p>I use stack to store the path slices, but I think deque will be a better choice because we need to construct the output canonical path in the same order with the given absolute one.</p><p>The rules are simple:</p><ol><li><code>&quot;..&quot;</code>: pop last one.</li><li><code>&quot;.&quot;</code> and <code>&quot;&quot;</code>: do nothing.</li><li>otherwise, push it.</li></ol><p>Then we construct the canonical path by directly access the stack data (not a good way, but works because the underlying structure of my stack).</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 71. Simplify Path (3/14/2022)</span>
<span class="token comment">// Runtime: 0 ms (94.81%) Memory: 6.97 MB (19.48%) </span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">StructStack</span><span class="token expression"><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> _type<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_name</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">_type<span class="token operator">*</span> data<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token class-name">uint64_t</span> size<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token class-name">uint64_t</span> max<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>push<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">,</span> _type<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>pop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>top<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token class-name">uint8_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>empty<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>clear<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> _name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> push_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">,</span> _type val<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> stack<span class="token operator">-&gt;</span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token keyword">return</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression">_type pop_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token operator">--</span>stack<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression">_type top_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token class-name">uint8_t</span> empty_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> clear_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> free_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> </span><span class="token punctuation">\\</span>
    <span class="token expression">_name<span class="token operator">*</span> create_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> max_size<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">_name<span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>max_size<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>max <span class="token operator">=</span> max_size<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>push <span class="token operator">=</span> <span class="token operator">&amp;</span>push_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>pop <span class="token operator">=</span> <span class="token operator">&amp;</span>pop_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">&amp;</span>top_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>empty <span class="token operator">=</span> <span class="token operator">&amp;</span>empty_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>clear <span class="token operator">=</span> <span class="token operator">&amp;</span>clear_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression">stack<span class="token operator">-&gt;</span>free <span class="token operator">=</span> <span class="token operator">&amp;</span>free_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> stack<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span></span></span>

<span class="token function">StructStack</span><span class="token punctuation">(</span>Stack<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">simplifyPath</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> absolute <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>absolute<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Stack<span class="token operator">*</span> stk <span class="token operator">=</span> <span class="token function">create_Stack</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>absolute<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stk<span class="token operator">-&gt;</span><span class="token function">pop</span><span class="token punctuation">(</span>stk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stk<span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span>stk<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">char</span><span class="token operator">*</span> canonical <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stk<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">strcat</span><span class="token punctuation">(</span>canonical<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcat</span><span class="token punctuation">(</span>canonical<span class="token punctuation">,</span> stk<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>canonical<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">strcat</span><span class="token punctuation">(</span>canonical<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">free</span><span class="token punctuation">(</span>absolute<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stk<span class="token operator">-&gt;</span><span class="token function">free</span><span class="token punctuation">(</span>stk<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> canonical<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br></div></div>`,24);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
