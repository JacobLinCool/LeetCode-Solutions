import{_ as t,r as o,o as i,c as p,a as n,b as a,F as r,d as s,e as l}from"./app.f2822f73.js";const c={},u=n("h1",{id:"_191-number-of-1-bits",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_191-number-of-1-bits","aria-hidden":"true"},"#"),s(" 191. Number of 1 Bits")],-1),d=n("h2",{id:"problem",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#problem","aria-hidden":"true"},"#"),s(" Problem")],-1),m=n("br",null,null,-1),h=n("p",null,[s("Tags: "),n("code",null,"Bit Manipulation")],-1),b=s("Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the "),g={href:"http://en.wikipedia.org/wiki/Hamming_weight",target:"_blank",rel:"noopener noreferrer"},_=s("Hamming weight"),k=s(")."),f=n("p",null,[n("strong",null,"Note:")],-1),x=n("li",null,"Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.",-1),v=s("In Java, the compiler represents the signed integers using "),w={href:"https://en.wikipedia.org/wiki/Two%27s_complement",target:"_blank",rel:"noopener noreferrer"},y=s("2's complement notation"),E=s(". Therefore, in "),I=n("strong",null,"Example 3",-1),N=s(", the input represents the signed integer. "),T=n("code",null,"-3",-1),B=s("."),j=l(`<p><strong>Example 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three &#39;1&#39; bits.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Example 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one &#39;1&#39; bit.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Example 3:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one &#39;1&#39; bits.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Constraints:</strong></p><ul><li>The input must be a <strong>binary string</strong> of length <code>32</code>.</li></ul><p><strong>Follow up:</strong> If this function is called many times, how would you optimize it?</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="js" tabindex="-1"><a class="header-anchor" href="#js" aria-hidden="true">#</a> JS</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 191. Number of 1 Bits (3/10/53745)</span>
<span class="token comment">// Runtime: 80 ms (57.00%) Memory: 40.46 MB (94.65%) </span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span> - a positive integer
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">===</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,12);function V(C,F){const e=o("ExternalLinkIcon");return i(),p(r,null,[u,d,m,h,n("p",null,[b,n("a",g,[_,a(e)]),k]),f,n("ul",null,[x,n("li",null,[v,n("a",w,[y,a(e)]),E,I,N,T,B])]),j],64)}var M=t(c,[["render",V],["__file","index.html.vue"]]);export{M as default};
