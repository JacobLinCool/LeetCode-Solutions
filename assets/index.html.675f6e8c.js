import{_ as n,e as s}from"./app.01c7092d.js";const a={},p=s(`<h1 id="_946-validate-stack-sequences" tabindex="-1"><a class="header-anchor" href="#_946-validate-stack-sequences" aria-hidden="true">#</a> 946. Validate Stack Sequences</h1><h2 id="problem" tabindex="-1"><a class="header-anchor" href="#problem" aria-hidden="true">#</a> Problem</h2><br><p>Tags: <code>Array</code>, <code>Stack</code>, <code>Simulation</code></p><p>Given two integer arrays <code>pushed</code> and <code>popped</code> each with distinct values, return <code>true</code> <em>if this could have been the result of a sequence of push and pop operations on an initially empty stack, or</em> <code>false</code> <em>otherwise.</em></p><p><strong>Example 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4),
pop() -&gt; 4,
push(5),
pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>Example 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= pushed.length &lt;= 1000</code></li><li><code>0 &lt;= pushed[i] &lt;= 1000</code></li><li>All the elements of <code>pushed</code> are <strong>unique</strong>.</li><li><code>popped.length == pushed.length</code></li><li><code>popped</code> is a permutation of <code>pushed</code>.</li></ul><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 946. Validate Stack Sequences (1/31/54174)</span>
<span class="token comment">// Runtime: 6 ms (76.42%) Memory: 6.15 MB (22.76%) </span>

<span class="token keyword">typedef</span> <span class="token class-name">uint64_t</span> u64<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">StructVector</span><span class="token expression"><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> _type<span class="token punctuation">)</span>                                              </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_name</span> <span class="token punctuation">{</span>                                                      </span><span class="token punctuation">\\</span>
        <span class="token expression">_type<span class="token operator">*</span> data<span class="token punctuation">;</span>                                                            </span><span class="token punctuation">\\</span>
        <span class="token expression">u64 size<span class="token punctuation">;</span>                                                               </span><span class="token punctuation">\\</span>
        <span class="token expression">u64 capacity<span class="token punctuation">;</span>                                                           </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>insert<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">,</span> u64<span class="token punctuation">,</span> _type<span class="token punctuation">)</span><span class="token punctuation">;</span>                              </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>remove<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">,</span> u64<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">,</span> u64<span class="token punctuation">,</span> _type<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>get<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">,</span> u64<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>push<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">,</span> _type<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>pop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>back<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                           </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>unshift<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">,</span> _type<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>shift<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                          </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>front<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                          </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>clear<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                           </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_name</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span> _name<span class="token punctuation">;</span>                                                                    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> insert_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">,</span> u64 _idx<span class="token punctuation">,</span> _type val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>vector<span class="token operator">-&gt;</span>size <span class="token operator">==</span> vector<span class="token operator">-&gt;</span>capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                 </span><span class="token punctuation">\\</span>
            <span class="token expression">vector<span class="token operator">-&gt;</span>capacity <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                             </span><span class="token punctuation">\\</span>
            <span class="token expression">vector<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>vector<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> vector<span class="token operator">-&gt;</span>capacity <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span>                                                                       </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>u64 i <span class="token operator">=</span> vector<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> _idx<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                             </span><span class="token punctuation">\\</span>
            <span class="token expression">vector<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vector<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                              </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span>                                                                       </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>_idx<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>                                               </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>                                                         </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression">_type remove_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">,</span> u64 _idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>                             </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>_idx <span class="token operator">&gt;=</span> vector<span class="token operator">-&gt;</span>size <span class="token operator">||</span> _idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                                           </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span>                                                                       </span><span class="token punctuation">\\</span>
        <span class="token expression">_type val <span class="token operator">=</span> vector<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>                                         </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>u64 i <span class="token operator">=</span> _idx<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vector<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         </span><span class="token punctuation">\\</span>
            <span class="token expression">vector<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vector<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                              </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span>                                                                       </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>                                                         </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> val<span class="token punctuation">;</span>                                                             </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> set_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">,</span> u64 _idx<span class="token punctuation">,</span> _type val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>_idx <span class="token operator">&gt;=</span> vector<span class="token operator">-&gt;</span>size <span class="token operator">||</span> _idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token keyword">return</span><span class="token punctuation">;</span>                                                             </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span>                                                                       </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>_idx<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>                                               </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression">_type get_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">,</span> u64 _idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>_idx <span class="token operator">&gt;=</span> vector<span class="token operator">-&gt;</span>size <span class="token operator">||</span> _idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                                           </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token punctuation">}</span>                                                                       </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> vector<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>                                              </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> push_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">,</span> _type val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                               </span><span class="token punctuation">\\</span>
        <span class="token expression">insert_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> vector<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                              </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression">_type pop_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                          </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> remove_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> vector<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression">_type back_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                         </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> get_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> vector<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> unshift_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">,</span> _type val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            </span><span class="token punctuation">\\</span>
        <span class="token expression">insert_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression">_type shift_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> remove_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression">_type front_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> get_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                          </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> clear_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                         </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                       </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">void</span> free_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span>_name<span class="token operator">*</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                          </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>vector<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                     </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>vector<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression">_name<span class="token operator">*</span> create_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                   </span><span class="token punctuation">\\</span>
        <span class="token expression">_name<span class="token operator">*</span> vector <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                       </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>capacity <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>                                                  </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>vector<span class="token operator">-&gt;</span>capacity <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>insert <span class="token operator">=</span> <span class="token operator">&amp;</span>insert_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                       </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>remove <span class="token operator">=</span> <span class="token operator">&amp;</span>remove_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                       </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>set <span class="token operator">=</span> <span class="token operator">&amp;</span>set_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                             </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>get <span class="token operator">=</span> <span class="token operator">&amp;</span>get_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                             </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>push <span class="token operator">=</span> <span class="token operator">&amp;</span>push_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                           </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>pop <span class="token operator">=</span> <span class="token operator">&amp;</span>pop_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                             </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>back <span class="token operator">=</span> <span class="token operator">&amp;</span>back_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                           </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>unshift <span class="token operator">=</span> <span class="token operator">&amp;</span>unshift_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                     </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>shift <span class="token operator">=</span> <span class="token operator">&amp;</span>shift_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                         </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token operator">&amp;</span>front_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                         </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>clear <span class="token operator">=</span> <span class="token operator">&amp;</span>clear_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                         </span><span class="token punctuation">\\</span>
        <span class="token expression">vector<span class="token operator">-&gt;</span>free <span class="token operator">=</span> <span class="token operator">&amp;</span>free_</span><span class="token punctuation">##</span><span class="token expression">_name<span class="token punctuation">;</span>                                           </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> vector<span class="token punctuation">;</span>                                                          </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                           </span></span>

<span class="token function">StructVector</span><span class="token punctuation">(</span>Vector<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bool <span class="token function">validateStackSequences</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pushed<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> pushed_size<span class="token punctuation">,</span> <span class="token keyword">int</span> popped<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> popped_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Vector<span class="token operator">*</span> vec <span class="token operator">=</span> <span class="token function">create_Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> pushed_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> popped_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>pushed_idx <span class="token operator">&lt;</span> pushed_size <span class="token operator">||</span> popped_idx <span class="token operator">&lt;</span> popped_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>pushed_idx <span class="token operator">&lt;</span> pushed_size <span class="token operator">&amp;&amp;</span> pushed<span class="token punctuation">[</span>pushed_idx<span class="token punctuation">]</span> <span class="token operator">!=</span> popped<span class="token punctuation">[</span>popped_idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vec<span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> pushed<span class="token punctuation">[</span>pushed_idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pushed_idx <span class="token operator">&lt;</span> pushed_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vec<span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> pushed<span class="token punctuation">[</span>pushed_idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vec<span class="token operator">-&gt;</span><span class="token function">back</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span> <span class="token operator">!=</span> popped<span class="token punctuation">[</span>popped_idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>popped_idx <span class="token operator">&lt;</span> popped_size <span class="token operator">&amp;&amp;</span> vec<span class="token operator">-&gt;</span><span class="token function">back</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span> <span class="token operator">==</span> popped<span class="token punctuation">[</span>popped_idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vec<span class="token operator">-&gt;</span><span class="token function">pop</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>
            popped_idx<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    bool result <span class="token operator">=</span> vec<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    vec<span class="token operator">-&gt;</span><span class="token function">free</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br></div></div><h3 id="ts" tabindex="-1"><a class="header-anchor" href="#ts" aria-hidden="true">#</a> TS</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 946. Validate Stack Sequences (5/2/54174)</span>
<span class="token comment">// Runtime: 110 ms (27.78%) Memory: 45.54 MB (55.56%) </span>

<span class="token keyword">function</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span>pushed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> popped<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> stk<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>pushed<span class="token punctuation">.</span>length <span class="token operator">||</span> popped<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>pushed<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> pushed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> popped<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pushed<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pushed<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> pushed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> popped<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pushed<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stk<span class="token punctuation">[</span>stk<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> popped<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>popped<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">[</span>stk<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> popped<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            popped<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> stk<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>`,16);function t(e,o){return p}var l=n(a,[["render",t],["__file","index.html.vue"]]);export{l as default};
