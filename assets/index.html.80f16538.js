import{_ as o,r as i,o as r,c as l,a as n,b as t,F as c,d as e,e as a}from"./app.b2e3238d.js";const d={},p=n("h1",{id:"_26-remove-duplicates-from-sorted-array",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_26-remove-duplicates-from-sorted-array","aria-hidden":"true"},"#"),e(" 26. Remove Duplicates from Sorted Array")],-1),u=n("h2",{id:"problem",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#problem","aria-hidden":"true"},"#"),e(" Problem")],-1),m=n("br",null,null,-1),h=n("p",null,[e("Tags: "),n("code",null,"Array"),e(", "),n("code",null,"Two Pointers")],-1),v=e("Given an integer array "),k=n("code",null,"nums",-1),_=e(" sorted in "),b=n("strong",null,"non-decreasing order",-1),g=e(", remove the duplicates "),f={href:"https://en.wikipedia.org/wiki/In-place_algorithm",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"in-place",-1),x=e(" such that each unique element appears only "),w=n("strong",null,"once",-1),I=e(". The "),E=n("strong",null,"relative order",-1),N=e(" of the elements should be kept the "),S=n("strong",null,"same",-1),C=e("."),T=a("<p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code>\xA0should hold the final result. It does not matter what you leave beyond the first\xA0<code>k</code>\xA0elements.</p><p>Return <code>k</code> <em>after placing the final result in the first</em> <code>k</code> <em>slots of</em> <code>nums</code>.</p>",2),D=e("Do "),B=n("strong",null,"not",-1),R=e(" allocate extra space for another array. You must do this by "),V=e("modifying the input array "),z={href:"https://en.wikipedia.org/wiki/In-place_algorithm",target:"_blank",rel:"noopener noreferrer"},A=e("in-place"),M=e(" with O(1) extra memory."),O=a(`<p><strong>Custom Judge:</strong></p><p>The judge will test your solution with the following code:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i &lt; k; i++) {
    assert nums[i] == expectedNums[i];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p><p><strong>Example 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li><li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li></ul><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 26. Remove Duplicates from Sorted Array (8/12/53958)</span>
<span class="token comment">// Runtime: 8 ms (93.20%) Memory: 7.45 MB (67.72%) </span>

<span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7576\u524D\u8981\u8207\u5F8C\u9762\u6BD4\u8F03\u7684 index</span>
    <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token comment">// \u5F9E\u7B2C\u4E8C\u500B\u958B\u59CB\uFF0C\u8207\u7576\u524D\u7684\u503C\u6BD4\u8F03</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span><span class="token operator">++</span>current<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> numsSize <span class="token operator">?</span> current <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function Y(F,L){const s=i("ExternalLinkIcon");return r(),l(c,null,[p,u,m,h,n("p",null,[v,k,_,b,g,n("a",f,[y,t(s)]),x,w,I,E,N,S,C]),T,n("p",null,[D,B,R,n("strong",null,[V,n("a",z,[A,t(s)])]),M]),O],64)}var j=o(d,[["render",Y],["__file","index.html.vue"]]);export{j as default};
