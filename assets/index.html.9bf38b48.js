import{_ as o,r,o as p,c as l,a as n,b as a,F as c,d as s,e as t}from"./app.5299eadb.js";const i={},u=n("h1",{id:"_26-remove-duplicates-from-sorted-array",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_26-remove-duplicates-from-sorted-array","aria-hidden":"true"},"#"),s(" 26. Remove Duplicates from Sorted Array")],-1),d=n("br",null,null,-1),m=n("p",null,[s("Tags: "),n("code",null,"Array"),s(", "),n("code",null,"Two Pointers")],-1),h=s("Given an integer array "),b=n("code",null,"nums",-1),k=s(" sorted in "),_=n("strong",null,"non-decreasing order",-1),g=s(", remove the duplicates "),f={href:"https://en.wikipedia.org/wiki/In-place_algorithm",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"in-place",-1),v=s(" such that each unique element appears only "),x=n("strong",null,"once",-1),w=s(". The "),I=n("strong",null,"relative order",-1),E=s(" of the elements should be kept the "),N=n("strong",null,"same",-1),S=s("."),C=t("<p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code>\xA0should hold the final result. It does not matter what you leave beyond the first\xA0<code>k</code>\xA0elements.</p><p>Return <code>k</code> <em>after placing the final result in the first</em> <code>k</code> <em>slots of</em> <code>nums</code>.</p>",2),T=s("Do "),D=n("strong",null,"not",-1),B=s(" allocate extra space for another array. You must do this by "),R=s("modifying the input array "),V={href:"https://en.wikipedia.org/wiki/In-place_algorithm",target:"_blank",rel:"noopener noreferrer"},z=s("in-place"),A=s(" with O(1) extra memory."),M=t(`<p><strong>Custom Judge:</strong></p><p>The judge will test your solution with the following code:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i &lt; k; i++) {
    assert nums[i] == expectedNums[i];
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p><p><strong>Example 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>Example 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li><li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li></ul><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 26. Remove Duplicates from Sorted Array (12/27/2021)</span>
<span class="token comment">// Runtime: 8 ms (93.99%) Memory: 7.45 MB (67.21%) </span>

<span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7576\u524D\u8981\u8207\u5F8C\u9762\u6BD4\u8F03\u7684 index</span>
    <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token comment">// \u5F9E\u7B2C\u4E8C\u500B\u958B\u59CB\uFF0C\u8207\u7576\u524D\u7684\u503C\u6BD4\u8F03</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span><span class="token operator">++</span>current<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> numsSize <span class="token operator">?</span> current <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,13);function O(Y,F){const e=r("ExternalLinkIcon");return p(),l(c,null,[u,d,m,n("p",null,[h,b,k,_,g,n("a",f,[y,a(e)]),v,x,w,I,E,N,S]),C,n("p",null,[T,D,B,n("strong",null,[R,n("a",V,[z,a(e)])]),A]),M],64)}var j=o(i,[["render",O],["__file","index.html.vue"]]);export{j as default};
